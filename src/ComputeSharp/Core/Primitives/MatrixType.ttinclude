<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs"#>
<#
// Generates all matrix members and types for a given HLSL type
void GenerateAllMatrixProperties(string typeName, int elementSize)
{
#>
using System.Runtime.InteropServices;
using ComputeSharp.Exceptions;

namespace ComputeSharp
{
<#
    for (int rows = 1; rows <= 4; rows++)
    for (int columns = 1; columns <= 4; columns++)
    {
        if (rows > 1 || columns > 1) WriteLine("");

        GenerateMatrixProperties(typeName, rows, columns, elementSize);
    }
#>
}
<#
}

// Generates all vector access properties for a specified type
void GenerateMatrixProperties(string typeName, int rows, int columns, int elementSize)
{
    string elementTypeName = typeName.ToLower();
    string fullTypeName = $"{typeName}{rows}x{columns}";
    string rowTypeName = columns > 1 ? $"{typeName}{columns}" : elementTypeName;
    List<string> fieldNames = new List<string>();
#>
    /// <inheritdoc cref="<#=fullTypeName#>"/>
    [StructLayout(LayoutKind.Explicit, Size = <#=(elementSize * rows * columns)#>, Pack = <#=elementSize#>)]
    public partial struct <#=fullTypeName#>
    {
<#
    PushIndent("    ");
    PushIndent("    ");

    // Generate the private fields
    for (int i = 1; i <= rows; i++)
    for (int j = 1; j <= columns; j++)
    {
        WriteLine($"[FieldOffset({((i - 1) * columns + j - 1) * elementSize})]");
        WriteLine($"private {elementTypeName} m{i}{j};");
        WriteLine("");

        fieldNames.Add($"m{i}{j}");
    }

    // Generate the elementwise constructor
    WriteLine("/// <summary>");
    WriteLine($"/// Creates a new <see cref=\"{fullTypeName}\"/> instance with the specified parameters.");
    WriteLine("/// </summary>");

    for (int i = 1; i <= rows; i++)
    for (int j = 1; j <= columns; j++)
    {
        WriteLine($"/// <param name=\"m{i}{j}\">The value to assign to the component at position [{i}, {j}].</param>");
    }

    WriteLine($"public {fullTypeName}({string.Join(", ", fieldNames.Select(n => $"{elementTypeName} {n}"))})");
    WriteLine("{");
    PushIndent("    ");

    foreach (string fieldName in fieldNames)
    {
        WriteLine($"this.{fieldName} = {fieldName};");
    }

    PopIndent();
    WriteLine("}");
    WriteLine("");

    // Generate the row-wise constructor, if needed
    if (rows > 1 && columns > 1)
    {
        WriteLine("/// <summary>");
        WriteLine($"/// Creates a new <see cref=\"{fullTypeName}\"/> instance with the specified parameters.");
        WriteLine("/// </summary>");

        for (int i = 1; i <= rows; i++)
        {
            WriteLine($"/// <param name=\"row{i}\">The value to assign to the row at position [{i}].</param>");
        }

        Write($"public {fullTypeName}(");

        for (int i = 1; i <= rows; i++)
        {
            if (i > 1) Write(", ");
            Write($"{rowTypeName} row{i}");
        }

        WriteLine(")");
        WriteLine("{");
        PushIndent("    ");

        for (int i = 1; i <= rows; i++)
        for (int j = 1; j <= columns; j++)
        {
            WriteLine($"this.m{i}{j} = row{i}.{"XYZW"[j - 1]};");
        }

        PopIndent();
        WriteLine("}");
        WriteLine("");
    }

    PopIndent();
    PopIndent();
#>
        /// <summary>
        /// Gets a reference to a specific row in the current <see cref="<#=fullTypeName#>"/> instance.
        /// </summary>
        /// <param name="row">The row to access.</param>
        public ref <#=rowTypeName#> this[int row] => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}[{typeof(int)}]");

        /// <summary>
        /// Gets a swizzled reference to a specific sequence of items in the current <see cref="<#=fullTypeName#>"/> instance.
        /// </summary>
        /// <param name="xy0">The identifier of the first item to index.</param>
        /// <param name="xy1">The identifier of the second item to index.</param>
        public ref <#=typeName#>2 this[MatrixIndex xy0, MatrixIndex xy1] => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}[{typeof(MatrixIndex)}, {typeof(MatrixIndex)}]");
        
        /// <summary>
        /// Gets a swizzled reference to a specific sequence of items in the current <see cref="<#=fullTypeName#>"/> instance.
        /// </summary>
        /// <param name="xy0">The identifier of the first item to index.</param>
        /// <param name="xy1">The identifier of the second item to index.</param>
        /// <param name="xy2">The identifier of the third item to index.</param>
        public ref <#=typeName#>3 this[MatrixIndex xy0, MatrixIndex xy1, MatrixIndex xy2] => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}[{typeof(MatrixIndex)}, {typeof(MatrixIndex)}, {typeof(MatrixIndex)}]");
        
        /// <summary>
        /// Gets a swizzled reference to a specific sequence of items in the current <see cref="<#=fullTypeName#>"/> instance.
        /// </summary>
        /// <param name="xy0">The identifier of the first item to index.</param>
        /// <param name="xy1">The identifier of the second item to index.</param>
        /// <param name="xy2">The identifier of the third item to index.</param>
        /// <param name="xy3">The identifier of the fourth item to index.</param>
        public ref <#=typeName#>4 this[MatrixIndex xy0, MatrixIndex xy1, MatrixIndex xy2, MatrixIndex xy3] => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}[{typeof(MatrixIndex)}, {typeof(MatrixIndex)}, {typeof(MatrixIndex)}, {typeof(MatrixIndex)}]");
<#
    for (int i = 1; i <= rows; i++)
    for (int j = 1; j <= columns; j++)
    {
        WriteLine("");
#>
        /// <summary>
        /// Gets a reference to the <see cref="<#=elementTypeName#>"/> value representing the component at position [<#=i#>, <#=j#>].
        /// </summary>
        public ref <#=elementTypeName#> M<#=i#><#=j#> => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}.M<#=i#><#=j#>");
<#
    }

    WriteLine("");
#>
        /// <summary>
        /// Creates a new <see cref="<#=fullTypeName#>"/> value with the same value for all its components.
        /// </summary>
        /// <param name="x">The value to use for the components of the new <see cref="<#=fullTypeName#>"/> instance.</param>
        public static implicit operator <#=fullTypeName#>(<#=elementTypeName#> x)
<#
    // Complete the conversion operator above
    PushIndent("    ");
    PushIndent("    ");
    WriteLine("{");
    PushIndent("    ");
    WriteLine($"{fullTypeName} matrix;");
    WriteLine("");

    for (int i = 1; i <= rows; i++)
    for (int j = 1; j <= columns; j++)
    {
        WriteLine($"matrix.m{i}{j} = x;");
    }

    WriteLine("");
    WriteLine("return matrix;");

    PopIndent();
    WriteLine("}");
    PopIndent();
    PopIndent();

    // Generate the negation operator
    if (elementTypeName != "Bool" && elementTypeName != "UInt")
    {
        WriteLine("");
#>
        /// <summary>
        /// Negates a <see cref="<#=fullTypeName#>"/> value.
        /// </summary>
        /// <param name="matrix">The <see cref="<#=fullTypeName#>"/> value to negate.</param>
        public static <#=fullTypeName#> operator -(<#=fullTypeName#> matrix) => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}.-");
<#
    }

    // Generate the numerical operators
    if (elementTypeName != "Bool")
    {
        WriteLine("");
#>
        /// <summary>
        /// Sums two <see cref="<#=fullTypeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=fullTypeName#>"/> value to sum.</param>
        /// <param name="right">The second <see cref="<#=fullTypeName#>"/> value to sum.</param>
        public static <#=fullTypeName#> operator +(<#=fullTypeName#> left, <#=fullTypeName#> right) => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}.+");

        /// <summary>
        /// Divides two <see cref="<#=fullTypeName#>"/> values (elementwise division).
        /// </summary>
        /// <param name="left">The first <see cref="<#=fullTypeName#>"/> value to divide.</param>
        /// <param name="right">The second <see cref="<#=fullTypeName#>"/> value to divide.</param>
        public static <#=fullTypeName#> operator /(<#=fullTypeName#> left, <#=fullTypeName#> right) => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}./");

        /// <summary>
        /// Multiplies two <see cref="<#=fullTypeName#>"/> values (elementwise product).
        /// </summary>
        /// <param name="left">The first <see cref="<#=fullTypeName#>"/> value to multiply.</param>
        /// <param name="right">The second <see cref="<#=fullTypeName#>"/> value to multiply.</param>
        public static <#=fullTypeName#> operator *(<#=fullTypeName#> left, <#=fullTypeName#> right) => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}.*");

        /// <summary>
        /// Subtracts two <see cref="<#=fullTypeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=fullTypeName#>"/> value to subtract.</param>
        /// <param name="right">The second <see cref="<#=fullTypeName#>"/> value to subtract.</param>
        public static <#=fullTypeName#> operator -(<#=fullTypeName#> left, <#=fullTypeName#> right) => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}.-");
<#
    }

    // Generate the casting operators for row/column vectors
    if (rows == 1 && columns > 1)
    {
        WriteLine("");
#>
        /// <summary>
        /// Casts a <see cref="<#=typeName#><#=columns#>"/> value to a <see cref="<#=fullTypeName#>"/> one.
        /// </summary>
        /// <param name="vector">The input <see cref="<#=typeName#><#=columns#>"/> value to cast.</param>
        public static implicit operator <#=fullTypeName#>(<#=typeName#><#=columns#> vector) => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}.{typeof(<#=fullTypeName#>)}({typeof(<#=typeName#><#=columns#>)})");
<#
    }

    if (columns == 1 && rows > 1)
    {
        WriteLine("");
#>
        /// <summary>
        /// Casts a <see cref="<#=fullTypeName#>"/> value to a <see cref="<#=typeName#><#=rows#>"/> one.
        /// </summary>
        /// <param name="matrix">The input <see cref="<#=fullTypeName#>"/> value to cast.</param>
        public static implicit operator <#=typeName#><#=rows#>(<#=fullTypeName#> matrix) => throw new InvalidExecutionContextException($"{typeof(<#=fullTypeName#>)}.{typeof(<#=typeName#><#=rows#>)}({typeof(<#=fullTypeName#>)})");
<#
    }
#>
    }
<#
}
#>