<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs"#>
<#
IEnumerable<string> EnumeratePropertyNames(string source)
{
    // Creates a comparison for a string based on indices of each character in a key
    static int CompareBy(string text, string key)
    {
        return text.Select(c => key.IndexOf(c)).Aggregate(0, (r, i) => (r << 4) + i);
    }

    // Returns all combinations from an input string
    static IEnumerable<string> Combinations(string text)
    {
        if (text.Length > 1)
        {
            for (int i = text.Length - 1; i >= 0; i--)
            {
                var characters = text.ToList();

                characters.RemoveAt(i);

                string substring = string.Join("", characters);

                foreach (var combination in Combinations(substring))
                {
                    yield return combination;
                }
            }
        }

        yield return text;
    }

    // Returns all permutations (with repetition) of a given string
    static IEnumerable<string> Permutations(string text)
    {
        static IEnumerable<string> EnumeratePermutations(string text, int length)
        {
            if (length == 1) return text.Select(c => c.ToString());

            return EnumeratePermutations(text, length - 1).SelectMany(s => text, (s1, s2) => s1 + s2);
        }

        return EnumeratePermutations(text, text.Length);
    }

    return
        Combinations(source)
        .Distinct()
        .SelectMany(Permutations)
        .OrderBy(s => s.Length)
        .ThenBy(s => CompareBy(s, source))
        .Distinct();
}

// Generates all vector access properties for a specified type
void GenerateVectorProperties(string typeName, int elementSize)
{
    string elementTypeName = Regex.Match(typeName, @"^[A-Za-z]+").Value;
    string hlslElementTypeName = elementTypeName.ToLower();
    int i = int.Parse(Regex.Match(typeName, @"\d+$").Value);
    string formattable = elementTypeName == "Bool" ? "" : " : IFormattable";
#>
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
#if !NET5_0
using RuntimeHelpers = ComputeSharp.SourceGenerators.Helpers.RuntimeHelpers;
using MemoryMarshal = ComputeSharp.SourceGenerators.Helpers.MemoryMarshal;
#endif

#nullable enable

namespace ComputeSharp
{
    /// <inheritdoc cref="<#=typeName#>"/>
    [StructLayout(LayoutKind.Explicit, Size = <#=(elementSize * i)#>, Pack = <#=elementSize#>)]
    public unsafe partial struct <#=typeName#><#=formattable#>
    {
        /// <summary>
        /// A private buffer to which the undefined properties will point to.
        /// </summary>
        private static readonly void* UndefinedData = (void*)RuntimeHelpers.AllocateTypeAssociatedMemory(typeof(<#=typeName#>), sizeof(<#=typeName#>));
<#
    WriteLine("");
    PushIndent("    ");
    PushIndent("    ");

    // Generate the private fields
    foreach (char name in "xyzw".Substring(0, i))
    {
        WriteLine($"[FieldOffset({"xyzw".IndexOf(name) * elementSize})]");
        WriteLine($"private {hlslElementTypeName} {name};");
        WriteLine("");
    }

    PopIndent();
    PopIndent();
#>
        /// <summary>
        /// Gets a reference to a specific component in the current <see cref="<#=typeName#>"/> instance.
        /// </summary>
        /// <param name="i">The index of the component to access.</param>
        /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
        public readonly ref <#=hlslElementTypeName#> this[int i] => ref *(<#=hlslElementTypeName#>*)UndefinedData;
<#
    PushIndent("    ");
    PushIndent("    ");

    // Generate the combinatorial swizzling properties
    foreach (
        var propertyName in
        from source in new[] { "XYZW", "RGBA" }
        let range = source.Substring(0, i)
        from name in EnumeratePropertyNames(range)
        where name.Length <= i
        select name)
    {
        WriteLine("");

        string propertyType = propertyName.Length == 1 ? hlslElementTypeName : $"{elementTypeName}{propertyName.Length}";
        bool isReadonly = propertyName.Distinct().Count() < propertyName.Length;
        string refType = isReadonly ? "ref readonly" : "ref";

        // XML docs
        WriteLine("/// <summary>");
        if (propertyName.Length == 1)
        {
            WriteLine($"/// Gets a reference to the <see cref=\"{propertyType}\"/> value representing the <c>{propertyName}</c> component.");
            WriteLine("/// </summary>");

            char fieldName = "xyzw"["xyzwrgba".IndexOf(propertyName.ToLower()) % 4];

            // Property
            Write($"public readonly {refType} {propertyType} {propertyName} ");
            WriteLine($"=> ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Unsafe.AsRef(in this.{fieldName}), 1));");
        }
        else
        {
            Write("/// Gets a ");
            if (isReadonly) Write("readonly ");
            Write($"reference to the <see cref=\"{propertyType}\"/> value with the components ");
            Write(string.Join(", ", propertyName.Select(c => $"<see cref=\"{c}\"/>")));
            WriteLine(".");
            WriteLine("/// </summary>");
            WriteLine("/// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>");

            // Property
            Write($"public readonly {refType} {propertyType} {propertyName} ");
            WriteLine($"=> ref *({propertyType}*)UndefinedData;");
        }
    }

    PopIndent();
    PopIndent();
    WriteLine("");

    if (elementTypeName == "Bool")
    {
#>
        /// <inheritdoc/>
        public override readonly string ToString()
        {
            StringBuilder sb = new();

            sb.Append('<');
<#
        PushIndent("    ");
        PushIndent("    ");
        PushIndent("    ");

        for (int j = 0; j < i; j++)
        {
            WriteLine($"sb.Append(this.{"xyzw"[j]});");

            if (j < i - 1)
            {
                WriteLine("sb.Append(\", \");");
            }        
        }

        PopIndent();
        PopIndent();
        PopIndent();
#>
            sb.Append('>');

            return sb.ToString();
        }
<#
    }
    else
    {
#>
        /// <inheritdoc/>
        public override readonly string ToString()
        {
            return ToString("G", CultureInfo.CurrentCulture);
        }

        /// <inheritdoc/>
        public readonly string ToString(string? format, IFormatProvider? formatProvider)
        {
            StringBuilder sb = new();

            string separator = NumberFormatInfo.GetInstance(formatProvider).NumberGroupSeparator;

            sb.Append('<');
<#
    PushIndent("    ");
    PushIndent("    ");
    PushIndent("    ");

    for (int j = 0; j < i; j++)
    {
        WriteLine($"sb.Append(this.{"xyzw"[j]}.ToString(format, formatProvider));");

        if (j < i - 1)
        {
            WriteLine("sb.Append(separator);");
            WriteLine("sb.Append(' ');");
        }        
    }

    PopIndent();
    PopIndent();
    PopIndent();
#>
            sb.Append('>');

            return sb.ToString();
        }
<#
    }

    // Generate the negation operator
    if (elementTypeName != "UInt")
    {
        WriteLine("");

        string argumentName = "xyzw".Substring(0, i);
        string operatorName = elementTypeName == "Bool" ? "!" : "-";
#>
        /// <summary>
        /// Negates a <see cref="<#=typeName#>"/> value.
        /// </summary>
        /// <param name="<#=argumentName#>">The <see cref="<#=typeName#>"/> value to negate.</param>
        /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
        public static <#=typeName#> operator <#=operatorName#>(<#=typeName#> <#=argumentName#>) => default;
<#
    }

    // Generate the numerical operators
    if (elementTypeName != "Bool")
    {
        WriteLine("");
#>
        /// <summary>
        /// Sums two <see cref="<#=typeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=typeName#>"/> value to sum.</param>
        /// <param name="right">The second <see cref="<#=typeName#>"/> value to sum.</param>
        /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
        public static <#=typeName#> operator +(<#=typeName#> left, <#=typeName#> right) => default;

        /// <summary>
        /// Divides two <see cref="<#=typeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=typeName#>"/> value to divide.</param>
        /// <param name="right">The second <see cref="<#=typeName#>"/> value to divide.</param>
        /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
        public static <#=typeName#> operator /(<#=typeName#> left, <#=typeName#> right) => default;

        /// <summary>
        /// Multiplies two <see cref="<#=typeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=typeName#>"/> value to multiply.</param>
        /// <param name="right">The second <see cref="<#=typeName#>"/> value to multiply.</param>
        /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
        public static <#=typeName#> operator *(<#=typeName#> left, <#=typeName#> right) => default;

        /// <summary>
        /// Subtracts two <see cref="<#=typeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=typeName#>"/> value to subtract.</param>
        /// <param name="right">The second <see cref="<#=typeName#>"/> value to subtract.</param>
        /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
        public static <#=typeName#> operator -(<#=typeName#> left, <#=typeName#> right) => default;
<#
    }
#>
    }
}
<#
}
#>