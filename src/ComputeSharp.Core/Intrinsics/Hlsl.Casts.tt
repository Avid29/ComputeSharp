<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs"#>
using ComputeSharp.Core.Intrinsics.Attributes;

namespace ComputeSharp;

/// <inheritdoc cref="Hlsl"/>
partial class Hlsl
{
<#
foreach (var type in new[] { "Float", "Double", "Int", "UInt" })
{
    int index = 0;

    List<(string Source, string Target)> typeNames = new List<(string, string)>();

    typeNames.Add((type.ToLower(), "bool"));

    // Vector types
    for (int i = 2; i <= 4; i++)
    {
        typeNames.Add(($"{type}{i}", $"Bool{i}"));
    }

    // Matrix types
    for (int i = 1; i <= 4; i++)
    {
        for (int j = 1; j <= 4; j++)
        {
            typeNames.Add(($"{type}{i}x{j}", $"Bool{i}x{j}"));
        }
    }

    // Produce the intrinsics
    foreach (var pair in typeNames)
    {
        if (index++ != 0) WriteLine("");

#>
    /// <summary>
    /// Converts the input <see cref="<#=pair.Source#>"/> value into a <see cref="<#=pair.Target#>"/> value (non-zero elements map to <see langword="true"/>, zero elements map to <see langword="false"/>).
    /// </summary>
    /// <param name="x">The input <see cref="<#=pair.Source#>"/> value.</param>
    /// <returns>The converted <see cref="<#=pair.Target#>"/> value.</returns>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    [HlslIntrinsicName("<#=pair.Target.ToLower()#>")]
    public static <#=pair.Target#> <#=type#>ToBool(<#=pair.Source#> x) => default;
<#
    }
}
#>
}
