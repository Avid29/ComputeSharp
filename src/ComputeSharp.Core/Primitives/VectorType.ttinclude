<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs"#>
<#
// Enumerates on all combinations of a given string (with repetition)
IEnumerable<string> EnumerateCombinations(string text)
{
    static IEnumerable<string> EnumerateCombinations(string text, int length)
    {
        if (length == 1) return text.Select(c => c.ToString());

        return EnumerateCombinations(text, length - 1).SelectMany(s => text, (s1, s2) => s1 + s2);
    }

    return EnumerateCombinations(text, text.Length);
}

// Generates all vector access properties for a specified type
void GenerateVectorProperties(string typeName, int elementSize)
{
    string elementTypeName = Regex.Match(typeName, @"^[A-Za-z]+").Value;
    string hlslElementTypeName = elementTypeName.ToLower();
    int i = int.Parse(Regex.Match(typeName, @"\d+$").Value);
#>
using System.Runtime.InteropServices;
using ComputeSharp.Exceptions;

namespace ComputeSharp
{
    /// <inheritdoc cref="<#=typeName#>"/>
    [StructLayout(LayoutKind.Explicit, Size = <#=(elementSize * i)#>)]
    public partial struct <#=typeName#>
    {
<#
    PushIndent("    ");
    PushIndent("    ");

    // Generate the private fields
    foreach (char name in "xyzw".Substring(0, i))
    {
        WriteLine($"[FieldOffset({"xyzw".IndexOf(name) * elementSize})]");
        WriteLine($"private {hlslElementTypeName} {name};");
        WriteLine("");
    }

    PopIndent();
    PopIndent();
#>
        /// <summary>
        /// Gets a reference to a specific component in the current <see cref="<#=typeName#>"/> instance.
        /// </summary>
        /// <param name="i">The index of the component to access.</param>
        public ref <#=hlslElementTypeName#> this[int i] => throw new InvalidExecutionContextException($"{nameof(<#=typeName#>)}[int]");
<#
    PushIndent("    ");
    PushIndent("    ");

    // Generate the combinatorial swizzling properties
    foreach (
        (string Name, int Length) property in
        "XYZW".Substring(0, i).Select(c => (c.ToString(), 1)).Concat(
        "RGBA".Substring(0, i).Select(c => (c.ToString(), 1))).Concat(
        from j in Enumerable.Range(2, i - 1)
        from source in new[] { "XYZW", "RGBA" }
        from name in EnumerateCombinations(source.Substring(0, j))
        select (name, j)))
    {
        WriteLine("");

        string propertyType = property.Length == 1 ? hlslElementTypeName : $"{elementTypeName}{property.Length}";
        bool isReadonly = property.Name.Distinct().Count() < property.Name.Length;
        string refType = isReadonly ? "ref readonly" : "ref";

        // XML docs
        WriteLine("/// <summary>");
        if (property.Length == 1)
        {
            WriteLine($"/// Gets a reference to the <see cref=\"{propertyType}\"/> value representing the <c>{property.Name}</c> component.");
        }
        else
        {
            Write("/// Gets a ");
            if (isReadonly) Write("readonly ");
            Write($"reference to the <see cref=\"{propertyType}\"/> value with the components ");
            Write(string.Join(", ", property.Name.Select(c => $"<see cref=\"{c}\"/>")));
            WriteLine(".");           
        }
        WriteLine("/// </summary>");

        // Property
        Write($"public {refType} {propertyType} {property.Name} ");
        WriteLine($"=> throw new InvalidExecutionContextException($\"{{nameof({typeName})}}.{{nameof({property.Name})}}\");");
    }

    PopIndent();
    PopIndent();

    // Generate the negation operator
    if (elementTypeName != "Bool" && elementTypeName != "UInt")
    {
        WriteLine("");

        string argumentName = "xyzw".Substring(0, i);
#>
        /// <summary>
        /// Negates a <see cref="<#=typeName#>"/> value.
        /// </summary>
        /// <param name="<#=argumentName#>">The <see cref="<#=typeName#>"/> value to negate.</param>
        public static <#=typeName#> operator -(<#=typeName#> <#=argumentName#>) => throw new InvalidExecutionContextException($"{nameof(<#=typeName#>)}.-");
<#
    }

    // Generate the numerical operators
    if (elementTypeName != "Bool")
    {
        WriteLine("");
#>
        /// <summary>
        /// Sums two <see cref="<#=typeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=typeName#>"/> value to sum.</param>
        /// <param name="right">The second <see cref="<#=typeName#>"/> value to sum.</param>
        public static <#=typeName#> operator +(<#=typeName#> left, <#=typeName#> right) => throw new InvalidExecutionContextException($"{nameof(<#=typeName#>)}.+");

        /// <summary>
        /// Divides two <see cref="<#=typeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=typeName#>"/> value to divide.</param>
        /// <param name="right">The second <see cref="<#=typeName#>"/> value to divide.</param>
        public static <#=typeName#> operator /(<#=typeName#> left, <#=typeName#> right) => throw new InvalidExecutionContextException($"{nameof(<#=typeName#>)}./");

        /// <summary>
        /// Multiplies two <see cref="<#=typeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=typeName#>"/> value to multiply.</param>
        /// <param name="right">The second <see cref="<#=typeName#>"/> value to multiply.</param>
        public static <#=typeName#> operator *(<#=typeName#> left, <#=typeName#> right) => throw new InvalidExecutionContextException($"{nameof(<#=typeName#>)}.*");

        /// <summary>
        /// Subtracts two <see cref="<#=typeName#>"/> values.
        /// </summary>
        /// <param name="left">The first <see cref="<#=typeName#>"/> value to subtract.</param>
        /// <param name="right">The second <see cref="<#=typeName#>"/> value to subtract.</param>
        public static <#=typeName#> operator -(<#=typeName#> left, <#=typeName#> right) => throw new InvalidExecutionContextException($"{nameof(<#=typeName#>)}.-");
<#
    }
#>
    }
}
<#
}
#>