name: .NET

on: [push, pull_request]

env:
  EXCLUDE_RUN_ID_FROM_PACKAGE: false
  EXCLUDE_SUFFIX_FROM_VERSION: false

jobs:

  # Build the whole ComputeSharp solution
  build-solution:
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x64, arm64]
    runs-on: windows-2022
    steps:
    - name: Git checkout
      uses: actions/checkout@v3
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Build
      run: msbuild -t:restore,build /p:Configuration=${{matrix.configuration}} /p:Platform=${{matrix.platform}} /bl
      shell: cmd
    - name: Upload MSBuild binary log
      uses: actions/upload-artifact@v3
      with:
        name: msbuild_log_${{matrix.configuration}}_${{matrix.platform}}
        path: msbuild.binlog
        if-no-files-found: error

  # Build the .msbuildproj projects and the UWP/WinUI projects to generate all the NuGet packages.
  # This workflow also uploads the resulting packages as artifacts.
  build-packages:
    runs-on: windows-2022
    steps:
    - name: Git checkout
      uses: actions/checkout@v3
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Build ComputeSharp.Core package
      run: dotnet build src\ComputeSharp.Core.Package\ComputeSharp.Core.Package.msbuildproj -c Release
      shell: cmd
    - name: Build ComputeSharp package
      run: dotnet build src\ComputeSharp.Package\ComputeSharp.Package.msbuildproj -c Release
      shell: cmd
    - name: Build ComputeSharp.Dynamic package
      run: dotnet build src\ComputeSharp.Dynamic.Package\ComputeSharp.Dynamic.Package.msbuildproj -c Release
      shell: cmd
    - name: Build ComputeSharp.D2D1 package
      run: dotnet build src\ComputeSharp.D2D1.Package\ComputeSharp.D2D1.Package.msbuildproj -c Release
      shell: cmd
    - name: Build ComputeSharp.Pix package
      run: dotnet build src\ComputeSharp.Pix.Package\ComputeSharp.Pix.Package.msbuildproj -c Release
      shell: cmd
    - name: Build ComputeSharp.Uwp package
      run: msbuild src\ComputeSharp.Uwp\ComputeSharp.Uwp.csproj -t:restore,build,pack /p:Configuration=Release
      shell: cmd
    - name: Restore ComputeSharp.WinUI project
      run: msbuild src\ComputeSharp.WinUI\ComputeSharp.WinUI.csproj -t:restore /p:Configuration=Release
      shell: cmd
    - name: Build ComputeSharp.WinUI package
      run: msbuild src\ComputeSharp.WinUI\ComputeSharp.WinUI.csproj -t:pack /p:Configuration=Release
      shell: cmd # Packing needs to be done separately and with no previous build target for it to work correctly
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nuget_packages
        path: artifacts\*.nupkg
        if-no-files-found: error

  # Run all unit tests referencing the ComputeSharp project directly
  run-tests:
    needs: [build-solution]
    strategy:
      matrix:
        framework: [net6.0, netcoreapp3.1, net472]
    runs-on: windows-2022
    steps:
    - name: Git checkout
      uses: actions/checkout@v3

      # DirectX 12 unit tests
    - name: Run ComputeSharp.Tests
      run: dotnet test tests\ComputeSharp.Tests\ComputeSharp.Tests.csproj -c Release -f ${{matrix.framework}} /p:Platform=x64 -v n -l "console;verbosity=detailed"
      shell: cmd
    - name: Run ComputeSharp.Tests.DisableDynamicCompilation
      run: dotnet test tests\ComputeSharp.Tests.DisableDynamicCompilation\ComputeSharp.Tests.DisableDynamicCompilation.csproj -c Release -f ${{matrix.framework}} /p:Platform=x64 -v n -l "console;verbosity=detailed"
      shell: cmd
    - name: Run ComputeSharp.Tests.GlobalStatements
      run: dotnet test tests\ComputeSharp.Tests.GlobalStatements\ComputeSharp.Tests.GlobalStatements.csproj -c Release -f ${{matrix.framework}} /p:Platform=x64 -v n -l "console;verbosity=detailed"
      shell: cmd
    - name: Run ComputeSharp.Tests.Internals
      run: dotnet test tests\ComputeSharp.Tests.Internals\ComputeSharp.Tests.Internals.csproj -c Release -f ${{matrix.framework}} /p:Platform=x64 -v n -l "console;verbosity=detailed"
      shell: cmd

      # Only run the source generators tests once, as they're not runtime specific
    - if: matrix.framework == 'net6.0'
      name: Run ComputeSharp.Tests.SourceGenerators
      run: dotnet test tests\ComputeSharp.Tests.SourceGenerators\ComputeSharp.Tests.SourceGenerators.csproj -v n -l "console;verbosity=detailed"
      shell: cmd
    
    # DirectX 12 device lost unit tests.
    # These tests are run one class at a time to ensure there's no accidental conflicts between any of them. This is because
    # the code paths being tested in this project are heavily dependent on process-wide mutable state (ie. DirectX 12 devices).
    - name: Run ComputeSharp.Tests.DeviceLost "DeviceDisposal"
      run: dotnet test tests\ComputeSharp.Tests.DeviceLost\ComputeSharp.Tests.DeviceLost.csproj --filter "TestCategory=DeviceDisposal" -c Release -f ${{matrix.framework}} -v n -l "console;verbosity=detailed"
      shell: cmd

    # These tests are failing randomly in the CI on .NET Framework, disabling them just for now
    - if: matrix.framework != 'net472'
      name: Run ComputeSharp.Tests.DeviceLost "DeviceLost"
      run: dotnet test tests\ComputeSharp.Tests.DeviceLost\ComputeSharp.Tests.DeviceLost.csproj --filter "TestCategory=DeviceLost" -c Release -f ${{matrix.framework}} -v n -l "console;verbosity=detailed"
      shell: cmd
    - if: matrix.framework != 'net472'
      name: Run ComputeSharp.Tests.DeviceLost "GetDefaultDevice"
      run: dotnet test tests\ComputeSharp.Tests.DeviceLost\ComputeSharp.Tests.DeviceLost.csproj --filter "TestCategory=GetDefaultDevice" -c Release -f ${{matrix.framework}} -v n -l "console;verbosity=detailed"
      shell: cmd

    # D2D1 unit tests
    - name: Run ComputeSharp.D2D1.Tests
      run: dotnet test tests\ComputeSharp.D2D1.Tests\ComputeSharp.D2D1.Tests.csproj -c Release -f ${{matrix.framework}} -v n -l "console;verbosity=detailed"
      shell: cmd
    - name: Run ComputeSharp.D2D1.Tests.AssemblyLevelAttributes
      run: dotnet test tests\ComputeSharp.D2D1.Tests.AssemblyLevelAttributes\ComputeSharp.D2D1.Tests.AssemblyLevelAttributes.csproj -c Release -f ${{matrix.framework}} -v n -l "console;verbosity=detailed"
      shell: cmd

  # Run all the local samples to ensure they build and run with no errors
  run-dx12-samples:
    needs: [build-solution]
    runs-on: windows-2022
    steps:
    - name: Git checkout
      uses: actions/checkout@v3
    - name: Build ComputeSharp.Sample (.NET 6)
      run: dotnet build samples\ComputeSharp.Sample\ComputeSharp.Sample.csproj -c Release -f net6.0
      shell: cmd
    - name: Run ComputeSharp.Sample (.NET 6)
      run: dotnet samples\ComputeSharp.Sample\bin\Release\net6.0\ComputeSharp.Sample.dll
      shell: cmd
    - name: Build ComputeSharp.Sample (.NET Core 3.1)
      run: dotnet build samples\ComputeSharp.Sample\ComputeSharp.Sample.csproj -c Release -f netcoreapp3.1 /p:Platform=x64 -r win-x64
      shell: cmd
    - name: Run ComputeSharp.Sample (.NET Core 3.1)
      run: samples\ComputeSharp.Sample\bin\x64\Release\netcoreapp3.1\win-x64\ComputeSharp.Sample.exe
      shell: cmd
    - name: Build ComputeSharp.Sample (.NET Framework 4.7.2)
      run: dotnet build samples\ComputeSharp.Sample\ComputeSharp.Sample.csproj -c Release -f net472 /p:Platform=x64
      shell: cmd
    - name: Run ComputeSharp.Sample (.NET Framework 4.7.2)
      run: samples\ComputeSharp.Sample\bin\x64\Release\net472\ComputeSharp.Sample.exe
      shell: cmd
    - name: Build ComputeSharp.Sample.FSharp
      run: dotnet build samples\ComputeSharp.Sample.FSharp\ComputeSharp.Sample.FSharp.fsproj -c Release
      shell: cmd
    - name: Run ComputeSharp.Sample.FSharp
      run: dotnet samples\ComputeSharp.Sample.FSharp\bin\Release\net6.0\ComputeSharp.Sample.FSharp.dll
      shell: cmd
    - name: Build ComputeSharp.ImageProcessing.csproj (.NET 6)
      run: dotnet build samples\ComputeSharp.ImageProcessing\ComputeSharp.ImageProcessing.csproj -c Release -f net6.0
      shell: cmd
    - name: Run ComputeSharp.ImageProcessing.csproj (.NET 6)
      run: dotnet samples\ComputeSharp.ImageProcessing\bin\Release\net6.0\ComputeSharp.ImageProcessing.dll
      shell: cmd
    - name: Build ComputeSharp.ImageProcessing.csproj (.NET Core 3.1)
      run: dotnet build samples\ComputeSharp.ImageProcessing\ComputeSharp.ImageProcessing.csproj -c Release -f netcoreapp3.1 /p:Platform=x64 -r win-x64
      shell: cmd
    - name: Run ComputeSharp.ImageProcessing.csproj (.NET Core 3.1)
      run: samples\ComputeSharp.ImageProcessing\bin\x64\Release\netcoreapp3.1\win-x64\ComputeSharp.ImageProcessing.exe
      shell: cmd
    - name: Build ComputeSharp.ImageProcessing.csproj (.NET Framework 4.7.2)
      run: dotnet build samples\ComputeSharp.ImageProcessing\ComputeSharp.ImageProcessing.csproj -c Release -f net472 /p:Platform=x64
      shell: cmd
    - name: Run ComputeSharp.ImageProcessing.csproj (.NET Framework 4.7.2)
      run: samples\ComputeSharp.ImageProcessing\bin\x64\Release\net472\ComputeSharp.ImageProcessing.exe
      shell: cmd

  # Download the NuGet packages generated in the previous job and use them
  # to build and run the sample project referencing them. This is used as
  # a test to ensure the NuGet packages work in a consuming project.
  verify-packages:
    needs: [build-packages]
    strategy:
      matrix:
        framework: [net6.0, netcoreapp3.1, net472]
        include:
          - framework: net6.0
            options: ''
            path: Release\net6.0
            extension: dll
          - framework: netcoreapp3.1
            options: -r win-x64
            path: Release\netcoreapp3.1\win-x64
            extension: exe
          - framework: net472
            options: /p:Platform=x64
            path: x64\Release\net472
            extension: exe
    runs-on: windows-2022
    steps:
    - name: Git checkout
      uses: actions/checkout@v3
    - name: Create local NuGet feed
      run: mkdir artifacts
      shell: cmd
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget_packages
        path: artifacts
    - name: Build ComputeSharp.NuGet
      run: dotnet build tests\ComputeSharp.NuGet\ComputeSharp.NuGet.csproj -c Release -f ${{matrix.framework}} ${{matrix.options}}
      shell: cmd
    - name: Run ComputeSharp.NuGet
      run: dotnet tests\ComputeSharp.NuGet\bin\${{matrix.path}}\ComputeSharp.NuGet.${{matrix.extension}}
      shell: cmd
    - name: Build ComputeSharp.Dynamic.NuGet
      run: dotnet build tests\ComputeSharp.Dynamic.NuGet\ComputeSharp.Dynamic.NuGet.csproj -c Release -f ${{matrix.framework}} ${{matrix.options}}
      shell: cmd
    - name: Run ComputeSharp.Dynamic.NuGet
      run: dotnet tests\ComputeSharp.Dynamic.NuGet\bin\${{matrix.path}}\ComputeSharp.Dynamic.NuGet.${{matrix.extension}}
      shell: cmd
    - name: Build ComputeSharp.Pix.NuGet
      run: dotnet build tests\ComputeSharp.Pix.NuGet\ComputeSharp.Pix.NuGet.csproj -c Release -f ${{matrix.framework}} ${{matrix.options}}
      shell: cmd
    - name: Run ComputeSharp.Pix.NuGet
      run: dotnet tests\ComputeSharp.Pix.NuGet\bin\${{matrix.path}}\ComputeSharp.Pix.NuGet.${{matrix.extension}}
      shell: cmd

  # Run the extra tests to validate a number of build and publishing configurations.
  # This is used to ensure the native dependencies can always be loaded correctly
  # regardless of whether the app is shipping with R2R, self-contained, etc.
  verify-package-native-libs:
    needs: [build-packages]
    runs-on: windows-2022
    steps:
    - name: Git checkout
      uses: actions/checkout@v3
    - name: Run ComputeSharp.Tests.NativeLibrariesResolver
      run: dotnet test tests\ComputeSharp.Tests.NativeLibrariesResolver\ComputeSharp.Tests.NativeLibrariesResolver.csproj -v n -l "console;verbosity=detailed"
      shell: cmd

  # Publish the packages to GitHub packages
  publish-nightlies-github:
    needs: [run-tests, run-dx12-samples, verify-packages, verify-package-native-libs]
    runs-on: windows-2022
    if: ${{github.event_name == 'push'}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: nuget_packages
        path: artifacts
    - run: dotnet nuget push "artifacts\*.nupkg" --source "https://nuget.pkg.github.com/${{github.repository_owner}}/index.json" --api-key ${{secrets.GITHUB_TOKEN}} --skip-duplicate
      shell: cmd

  # Publish the packages to Azure DevOps
  publish-nightlies-azure-devops:
    needs: [run-tests, run-dx12-samples, verify-packages, verify-package-native-libs]
    runs-on: windows-2022
    if: ${{github.event_name == 'push'}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: nuget_packages
        path: artifacts
    - run: dotnet nuget push "artifacts\*.nupkg" --source "https://sergio0694.pkgs.visualstudio.com/ComputeSharp/_packaging/ComputeSharp/nuget/v3/index.json" --api-key ${{secrets.ADO_FEED_PERSONAL_ACCESS_TOKEN}} --skip-duplicate
      shell: cmd
